[project]
name = "ceph-mcp-server"
version = "0.1.0"
description = "Model Context Protocol server for Ceph storage cluster management"
readme = "README.md"
license = "MIT"
requires-python = ">=3.13"
authors = [
    { name = "Rajmohan Ramamoorthy", email = "ram.rajmohanr@gmail.com" },
]
maintainers = [
    { name = "Rajmohan Ramamoorthy", email = "ram.rajmohanr@gmail.com" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Systems Administration",
    "Topic :: System :: Networking",
]
keywords = [
    "ceph",
    "mcp",
    "model context protocol",
    "storage management",
    "system administration",
]
dependencies = [
    "asyncio-mqtt>=0.16.2",
    "fastmcp>=2.5.2",
    "httpx[socks]>=0.28.1",
    "pydantic>=2.11.5",
    "pydantic-extra-types>=2.10.4",
    "pydantic-settings>=2.9.1",
    "python-dotenv>=1.1.0",
    "semver>=3.0.4",
    "structlog>=25.3.0",
]

[dependency-groups]
dev = [
    "black>=25.1.0",
    "isort>=6.0.1",
    "mypy>=1.16.0",
    "pytest>=8.3.5",
    "pytest-asyncio>=1.0.0",
]

[project.scripts]
ceph-mcp-server = "ceph_mcp.server:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project.urls]
Homepage = "https://github.com/rajmohanram/ceph-mcp-server"
Documentation = "https://github.com/rajmohanram/ceph-mcp-server#readme"
Repository = "https://github.com/rajmohanram/ceph-mcp-server.git"
Issues = "https://github.com/rajmohanram/ceph-mcp-server/issues"

[tool.hatch.version]
path = "src/ceph_mcp/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/ceph_mcp"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
    "/.env.example",
]

[tool.mypy]
python_version = "3.11"
mypy_path = "src"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "mcp.*",
    "structlog.*",
]
disallow_untyped_defs = false

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
pythonpath = ["src"]
asyncio_mode = "auto"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "--cov=ceph_mcp",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src/ceph_mcp"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
